package LARVA_NATIVE

import (
    "time"
)

type lar_cls_@<<_Time>> struct {
    ntm time.Time
}

func (this *lar_cls_@<<_Time>>) lar_method_unix_nano() int64 {
    return this.ntm.UnixNano()
}

func (this *lar_cls_@<<_Time>>) lar_method_format(layout *lar_cls_@<<:String>>) *lar_cls_@<<:String>> {
    return lar_str_from_go_str(this.ntm.Format(lar_str_to_go_str(layout)))
}

func lar_func_@<<now>>() *lar_cls_@<<Time>> {
    return &lar_cls_@<<Time>>{
        m_t: &lar_cls_@<<_Time>>{
            ntm: time.Now(),
        },
    }
}

func lar_func_@<<sleep_nano>>(nano_sec int64) {
    time.Sleep(time.Duration(nano_sec))
}
