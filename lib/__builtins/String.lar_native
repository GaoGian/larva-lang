package LARVA_NATIVE

import (
    "strings"
    "strconv"
    "fmt"
)

type lar_cls_@<<_String>> struct {
    s string
}

func lar_new_obj_lar_cls_@<<_String>>(arr *lar_arr_uint8_1) *lar_cls_@<<_String>> {
    return &lar_cls_@<<_String>>{s: string(arr.arr)}
}

func (this *lar_cls_@<<_String>>) method_len() int64 {
    return int64(len(this.s))
}

func (this *lar_cls_@<<_String>>) method_char_at(idx int64) uint8 {
    return this.s[idx]
}

func (this *lar_cls_@<<_String>>) method_cmp(other *lar_cls_@<<String>>) int32 {
    return int32(strings.Compare(this.s, other.m_s.s))
}

func (this *lar_cls_@<<_String>>) method_index(other *lar_cls_@<<String>>) int64 {
    return int64(strings.Index(this.s, other.m_s.s))
}

func (this *lar_cls_@<<_String>>) method_to_char_array() *lar_arr_uint8_1 {
    return &lar_arr_uint8_1{arr: []uint8(this.s)}
}

func (this *lar_cls_@<<_String>>) method_hash() uint64 {
    var h uint64
    s := this.s
    sl := len(s)
    for i := 0; i < sl; i ++ {
        h = (h + uint64(s[i])) * 1000003
    }
    return h
}

func (this *lar_cls_@<<_String>>) method_concat(other *lar_cls_@<<String>>) *lar_cls_@<<String>> {
    return &lar_cls_@<<String>>{
        m_s: &lar_cls_@<<_String>>{
            s: this.s + other.m_s.s,
        },
    }
}

func (this *lar_cls_@<<_String>>) method_parse_bool() bool {
    s := this.s
    r, err := strconv.ParseBool(s)
    if err != nil {
        lar_func_@<<throw>>(lar_new_obj_lar_cls_@<<ValueError>>(lar_str_fmt("无效的bool字面量：'%s'", s)))
    }
    return r
}

func (this *lar_cls_@<<_String>>) method_parse_long(base int32) int64 {
    s := this.s
    r, err := strconv.ParseInt(s, int(base), 64)
    if err != nil {
        var err_info *lar_cls_@<<String>>
        if base == 0 {
            err_info = lar_str_fmt("无效的long字面量：'%s'", s)
        } else {
            err_info = lar_str_fmt("无效的%d进制long字面量：'%s'", base, s)
        }
        lar_func_@<<throw>>(lar_new_obj_lar_cls_@<<ValueError>>(err_info))
    }
    return r
}

func (this *lar_cls_@<<_String>>) method_parse_ulong(base int32) uint64 {
    s := this.s
    r, err := strconv.ParseUint(s, int(base), 64)
    if err != nil {
        var err_info *lar_cls_@<<String>>
        if base == 0 {
            err_info = lar_str_fmt("无效的ulong字面量：'%s'", s)
        } else {
            err_info = lar_str_fmt("无效的%d进制ulong字面量：'%s'", base, s)
        }
        lar_func_@<<throw>>(lar_new_obj_lar_cls_@<<ValueError>>(err_info))
    }
    return r
}

func (this *lar_cls_@<<_String>>) method_parse_double() float64 {
    s := this.s
    r, err := strconv.ParseFloat(s, 64)
    if err != nil {
        err_info := lar_str_fmt("无效的double字面量：'%s'", s)
        lar_func_@<<throw>>(lar_new_obj_lar_cls_@<<ValueError>>(err_info))
    }
    return r
}

func lar_str_from_go_str(s string) *lar_cls_@<<String>> {
	return &lar_cls_@<<String>>{
        m_s: &lar_cls_@<<_String>>{
            s: s,
        },
    }
}

func lar_str_to_go_str(ls *lar_cls_@<<String>>) string {
    return ls.m_s.s
}

func lar_str_fmt(format string, a ...interface{}) *lar_cls_@<<String>> {
    for i, v := range a {
        s, ok := v.(*lar_cls_@<<String>>)
        if ok {
            a[i] = s.m_s.s
        }
    }
    return lar_str_from_go_str(fmt.Sprintf(format, a...))
}

const hex_digits = "0123456789ABCDEF"
var escape_char_table = map[byte]byte {
    '\a': 'a',
    '\b': 'b',
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\v': 'v',
}
func lar_str_repr(ls *lar_cls_@<<String>>) *lar_cls_@<<String>> {
    s := lar_str_to_go_str(ls)
    s_len := len(s)
    b := make([]byte, 0, s_len)
    b = append(b, '"')
    for i := 0; i < s_len; i ++ {
        c := s[i]
        if ec, ok := escape_char_table[c]; ok {
            b = append(b, '\\', ec)
        } else if c < 32 || c > 126 {
            b = append(b, '\\', 'x', hex_digits[c / 16], hex_digits[c % 16])
        } else if c == '\\' || c == '"' {
            b = append(b, '\\', c)
        } else {
            b = append(b, c)
        }
    }
    b = append(b, '"')
    return lar_str_from_go_str(string(b))
}
