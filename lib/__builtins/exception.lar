//可以用throw函数抛出的对象类型
public interface Throwable
{
    public String to_str();
}

//抛出异常
public native void throw(Throwable t);

//捕获语法返回的对象：抛出的对象+traceback的组合
//定义：Catched<Throwable>是所有Catched对象的base
public class Catched<T>
{
    Catched(T t, String tb)
    {
        throwed = t;
        traceback = tb;
    }

    public Catched<Throwable> to_base()
    {
        return new Catched<Throwable>(throwed, traceback);
    }

    public T throwed;
    public String traceback;
}

//捕获base
public native Catched<Throwable> catch_base();

//捕获指定类型的异常
public Catched<T> catch<T>()
{
    var c = catch_base();
    if (c == nil)
    {
        //无异常
        return nil;
    }
    T throwed = (T)c.throwed;
    if (throwed == nil)
    {
        //不是当前需要的类型，继续往上抛
        rethrow(c);
    }
    return new Catched<T>(throwed, c.traceback);
}

//继续往上抛当前Catched对象，维持对象不变，即和再次throw的区别在于traceback可以保持不变
public native void rethrow(Catched<Throwable> c);

//一个基本的常用异常的实现：仅包含一个字符串info
public class Exception
{
    public Exception(String s)
    {
        info = s;
    }

    public String to_str()
    {
        return info;
    }

    String info;
}

//这里是通用的一些异常类型

public class ValueError
{
    public ValueError(String s)
    {
        e = new Exception("ValueError: ".concat(s));
    }

    usemethod Exception e;
}
