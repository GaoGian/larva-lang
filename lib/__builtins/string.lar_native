package LARVA_NATIVE

import (
    "strings"
    "strconv"
    "fmt"
    "reflect"
)

type lar_cls_@<<_String>> struct {
    s string
}

func lar_new_obj_lar_cls_@<<_String>>(arr *lar_arr_uint8_1) *lar_cls_@<<_String>> {
    return &lar_cls_@<<_String>>{s: string(arr.arr)}
}

func (this *lar_cls_@<<_String>>) lar_method_len() int64 {
    return int64(len(this.s))
}

func (this *lar_cls_@<<_String>>) lar_method_char_at(idx int64) uint8 {
    return this.s[idx]
}

func (this *lar_cls_@<<_String>>) lar_method_cmp(other *lar_cls_@<<String>>) int32 {
    return int32(strings.Compare(this.s, other.m_s.s))
}

func (this *lar_cls_@<<_String>>) lar_method_index(other *lar_cls_@<<String>>) int64 {
    return int64(strings.Index(this.s, other.m_s.s))
}

func (this *lar_cls_@<<_String>>) lar_method_to_char_array() *lar_arr_uint8_1 {
    return &lar_arr_uint8_1{arr: []uint8(this.s)}
}

func (this *lar_cls_@<<_String>>) lar_method_@<<hash>>() int64 {
    var h uint64
    s := this.s
    sl := len(s)
    for i := 0; i < sl; i ++ {
        h = (h + uint64(s[i])) * 1000003
    }
    return int64(h)
}

func (this *lar_cls_@<<_String>>) lar_method_repr() *lar_cls_@<<String>> {
    return &lar_cls_@<<String>>{
        m_s: &lar_cls_@<<_String>>{
            s: fmt.Sprintf("%q", this.s),
        },
    }
}

func (this *lar_cls_@<<_String>>) lar_method_concat(other *lar_cls_@<<String>>) *lar_cls_@<<String>> {
    return &lar_cls_@<<String>>{
        m_s: &lar_cls_@<<_String>>{
            s: this.s + other.m_s.s,
        },
    }
}

func (this *lar_cls_@<<_String>>) lar_method_join(si lar_gintf_inst_@<<Iter>>_1_lar_cls_@<<String>>) *lar_cls_@<<String>> {
    sl := make([]string, 0, 16)
    for ; !si.lar_method_after_end(); si.lar_method_inc() {
        sl = append(sl, lar_str_to_go_str(si.lar_method_get()))
    }
    return lar_str_from_go_str(strings.Join(sl, this.s))
}

func (this *lar_cls_@<<_String>>) lar_method_parse_bool() bool {
    s := this.s
    r, err := strconv.ParseBool(s)
    if err != nil {
        lar_func_@<<throw>>(lar_new_obj_lar_cls_@<<ValueError>>(lar_str_fmt("无效的bool字面量：'%s'", s)))
    }
    return r
}

func (this *lar_cls_@<<_String>>) lar_method_parse_long(base int32) int64 {
    s := this.s
    r, err := strconv.ParseInt(s, int(base), 64)
    if err != nil {
        var err_info *lar_cls_@<<String>>
        if base == 0 {
            err_info = lar_str_fmt("无效的long字面量：'%s'", s)
        } else {
            err_info = lar_str_fmt("无效的%d进制long字面量：'%s'", base, s)
        }
        lar_func_@<<throw>>(lar_new_obj_lar_cls_@<<ValueError>>(err_info))
    }
    return r
}

func (this *lar_cls_@<<_String>>) lar_method_parse_ulong(base int32) uint64 {
    s := this.s
    r, err := strconv.ParseUint(s, int(base), 64)
    if err != nil {
        var err_info *lar_cls_@<<String>>
        if base == 0 {
            err_info = lar_str_fmt("无效的ulong字面量：'%s'", s)
        } else {
            err_info = lar_str_fmt("无效的%d进制ulong字面量：'%s'", base, s)
        }
        lar_func_@<<throw>>(lar_new_obj_lar_cls_@<<ValueError>>(err_info))
    }
    return r
}

func (this *lar_cls_@<<_String>>) lar_method_parse_double() float64 {
    s := this.s
    r, err := strconv.ParseFloat(s, 64)
    if err != nil {
        err_info := lar_str_fmt("无效的double字面量：'%s'", s)
        lar_func_@<<throw>>(lar_new_obj_lar_cls_@<<ValueError>>(err_info))
    }
    return r
}

func lar_str_from_go_str(s string) *lar_cls_@<<String>> {
    return &lar_cls_@<<String>>{
        m_s: &lar_cls_@<<_String>>{
            s: s,
        },
    }
}

func lar_str_to_go_str(ls *lar_cls_@<<String>>) string {
    return ls.m_s.s
}

func lar_str_repr_to_go_str(ls *lar_cls_@<<String>>) string {
    return fmt.Sprintf("%q", ls.m_s.s)
}

func lar_str_fmt(format string, a ...interface{}) *lar_cls_@<<String>> {
    return lar_str_from_go_str(fmt.Sprintf(format, a...))
}

type lar_go_intf_strable interface {
    lar_method_str() *lar_cls_@<<String>>
}

func lar_go_func_any_to_go_str(a lar_intf_@<<Any>>) string {
    strable, ok := a.(lar_go_intf_strable)
    if ok {
        return lar_str_to_go_str(strable.lar_method_str())
    }
    return lar_go_func_any_repr_to_go_str(a)
}

type lar_go_intf_reprable interface {
    lar_method_repr() *lar_cls_@<<String>>
}

func lar_go_func_any_repr_to_go_str(a lar_intf_@<<Any>>) string {
    if a == nil {
        return "<nil>"
    }
    switch v := a.(type) {
    case bool:
        return fmt.Sprintf("%t", v)
    case int8, uint8, int16, uint16, int32, uint32, int64, uint64:
        return fmt.Sprintf("%d", v)
    case float32, float64:
        return fmt.Sprintf("%f", v)
    case *lar_arr_uint8_1:
        return fmt.Sprintf("<char[] %q>", string(v.arr))
    }
    reprable, ok := a.(lar_go_intf_reprable)
    if ok {
        return lar_str_to_go_str(reprable.lar_method_repr())
    }
    lri, ok := a.(lar_reflect_intf)
    if ok {
        return fmt.Sprintf("<%s object at 0x%X>",
                           lar_str_to_go_str(lri.lar_reflect_type_name()), reflect.ValueOf(&lri).Elem().InterfaceData()[1])
    }
    return fmt.Sprintf("<go object>")
}
