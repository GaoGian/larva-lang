/*
random模块，产生随机数
算法：Wichmann-Hill
      Wichmann, B. A. & Hill, I. D. (1982)
*/

import time;

bool seed_inited = false;
long seed_x = 0;
long seed_y = 0;
long seed_z = 0;

void init_seed()
{
    long a = (long)((double)time.now().unix_nano() / 1e9 * 256.0);

    seed_x = a % 30268;
    a /= 30268;
    ++ seed_x;

    seed_y = a % 30306;
    a /= 30306;
    ++ seed_y;

    seed_z = a % 30322;
    a /= 30322;
    ++ seed_z;

    seed_inited = true;
}

public double random()
{
    if (!seed_inited)
    {
        init_seed();
    }
    seed_x = seed_x * 171 % 30269;
    seed_y = seed_y * 172 % 30307;
    seed_z = seed_z * 170 % 30323;
    return ((double)seed_x / 30269.0 + (double)seed_y / 30307.0 + (double)seed_z / 30323.0) % 1.0;
}

public void shuffle<T>(T[] arr)
{
    for (long i = arr.len - 1; i > 0; -- i)
    {
        long rand_i = (long)(random() * (i + 1));
        T tmp = arr[i];
        arr[i] = arr[rand_i];
        arr[rand_i] = tmp;
    }
}
