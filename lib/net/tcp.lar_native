package LARVA_NATIVE

import (
    "net"
)

type lar_cls_@<<_TcpListener>> struct {
    ntl *net.TCPListener
}

func lar_new_obj_lar_cls_@<<_TcpListener>>(addr *lar_cls_@<<:String>>) *lar_cls_@<<_TcpListener>> {
    tcp_addr, err := net.ResolveTCPAddr("tcp", lar_str_to_go_str(addr))
    lar_go_func_@<<throw_on_go_err>>(err)
    ntl, err := net.ListenTCP("tcp", tcp_addr)
    lar_go_func_@<<throw_on_go_err>>(err)
    return &lar_cls_@<<_TcpListener>>{ntl: ntl}
}

func (this *lar_cls_@<<_TcpListener>>) lar_method_addr() *lar_cls_@<<:String>> {
    return lar_str_from_go_str(this.ntl.Addr().String())
}

func (this *lar_cls_@<<_TcpListener>>) lar_method_accept() *lar_cls_@<<TcpConn>> {
    ntc, err := this.ntl.AcceptTCP()
    lar_go_func_@<<throw_on_go_err>>(err)
    return &lar_cls_@<<TcpConn>>{
        m_tc: &lar_cls_@<<_TcpConn>>{
            ntc: ntc,
        },
    }
}

func (this *lar_cls_@<<_TcpListener>>) lar_method_close() {
    err := this.ntl.Close()
    lar_go_func_@<<throw_on_go_err>>(err)
}

type lar_cls_@<<_TcpConn>> struct {
    ntc *net.TCPConn
}

func (this *lar_cls_@<<_TcpConn>>) lar_method_local_addr() *lar_cls_@<<:String>> {
    return lar_str_from_go_str(this.ntc.LocalAddr().String())
}

func (this *lar_cls_@<<_TcpConn>>) lar_method_remote_addr() *lar_cls_@<<:String>> {
    return lar_str_from_go_str(this.ntc.RemoteAddr().String())
}

func (this *lar_cls_@<<_TcpConn>>) lar_method_read(buf *lar_arr_uint8_1) int64 {
    n, err := lar_go_func_@<<io.read>>(this.ntc, buf.arr)
    lar_go_func_@<<throw_on_go_err>>(err)
    return int64(n)
}

func (this *lar_cls_@<<_TcpConn>>) lar_method_write(buf *lar_arr_uint8_1) {
    _, err := this.ntc.Write(buf.arr)
    lar_go_func_@<<throw_on_go_err>>(err)
}

func (this *lar_cls_@<<_TcpConn>>) lar_method_close() {
    err := this.ntc.Close()
    lar_go_func_@<<throw_on_go_err>>(err)
}
