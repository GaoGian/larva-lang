package LARVA_NATIVE

type lar_cls_@<<_JsonArr>> struct {
    arr []interface{}
}

func lar_new_obj_lar_cls_@<<_JsonArr>>(size int64) *lar_cls_@<<_JsonArr>> {
    return &lar_cls_@<<_JsonArr>>{
        arr: make([]interface{}, size),
    }
}

func (this *lar_cls_@<<_JsonArr>>) lar_method_marshal() *lar_arr_uint8_1 {
    return &lar_arr_uint8_1{
        arr: lar_go_func_@<<go_marshal>>(this.arr),
    }
}

func (this *lar_cls_@<<_JsonArr>>) lar_method_size() int64 {
    return int64(len(this.arr))
}

func (this *lar_cls_@<<_JsonArr>>) lar_method_get(idx int64) lar_intf_@<<Json>> {
    return lar_go_func_@<<go_value_to_json_intf>>(this.arr[idx])
}

func (this *lar_cls_@<<_JsonArr>>) lar_method_set(idx int64, value lar_intf_@<<:Any>>) {
    this.arr[idx] = lar_go_func_@<<to_go_value>>(value)
}

func (this *lar_cls_@<<_JsonArr>>) lar_method_slice(begin, end int64) *lar_cls_@<<JsonArr>> {
    json_arr := lar_new_obj_lar_cls_@<<JsonArr>>(0)
    json_arr.m_arr.arr = this.arr[begin : end]
    return json_arr
}
