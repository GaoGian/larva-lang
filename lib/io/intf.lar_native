package LARVA_NATIVE

import (
    "io"
)

type lar_go_stru_@<<io.Readable_to_go_ReadCloser>> struct {
    readable lar_intf_@<<Readable>>
}

func (this lar_go_stru_@<<io.Readable_to_go_ReadCloser>>) Read(buf []byte) (n int, e error) {
    defer func () {
        c := lar_func_@<<:catch_base>>(recover())
        if c != nil {
            e = c.lar_go_method_to_go_err()
        }
    }()
    read_len := this.readable.lar_method_read(&lar_arr_uint8_1{
        arr: buf,
    })
    if read_len == 0 {
        e = io.EOF
    } else {
        n = int(read_len)
    }
    return
}

func (this lar_go_stru_@<<io.Readable_to_go_ReadCloser>>) Close() (e error) {
    defer func () {
        c := lar_func_@<<:catch_base>>(recover())
        if c != nil {
            e = c.lar_go_method_to_go_err()
        }
    }()
    this.readable.lar_method_close()
    return
}

func lar_go_func_@<<io.Readable_to_go_ReadCloser>>(readable lar_intf_@<<Readable>>) io.ReadCloser {
    p, ok := readable.(lar_go_stru_@<<io.go_ReadCloser_to_Readable>>)
    if ok {
        return p.r
    }
    return lar_go_stru_@<<io.Readable_to_go_ReadCloser>>{
        readable: readable,
    }
}

type lar_go_stru_@<<io.go_ReadCloser_to_Readable>> struct {
    r io.ReadCloser
}

func (this lar_go_stru_@<<io.go_ReadCloser_to_Readable>>) lar_method_read(buf *lar_arr_uint8_1) int64 {
    n, err := lar_go_func_@<<io.read>>(this.r, buf.arr)
    lar_go_func_@<<throw_on_go_err>>(err)
    return int64(n)
}

func (this lar_go_stru_@<<io.go_ReadCloser_to_Readable>>) lar_method_close() {
    err := this.r.Close()
    lar_go_func_@<<throw_on_go_err>>(err)
}

func lar_go_func_@<<io.go_ReadCloser_to_Readable>>(r io.ReadCloser) lar_intf_@<<Readable>> {
    p, ok := r.(lar_go_stru_@<<io.Readable_to_go_ReadCloser>>)
    if ok {
        return p.readable
    }
    return lar_go_stru_@<<io.go_ReadCloser_to_Readable>>{
        r: r,
    }
}

type lar_go_stru_@<<io.Writeable_to_go_WriteCloser>> struct {
    writeable lar_intf_@<<Writeable>>
}

func (this lar_go_stru_@<<io.Writeable_to_go_WriteCloser>>) Write(buf []byte) (n int, e error) {
    defer func () {
        c := lar_func_@<<:catch_base>>(recover())
        if c != nil {
            e = c.lar_go_method_to_go_err()
        }
    }()
    this.writeable.lar_method_write(&lar_arr_uint8_1{
        arr: buf,
    })
    n = len(buf)
    return
}

func (this lar_go_stru_@<<io.Writeable_to_go_WriteCloser>>) Close() (e error) {
    defer func () {
        c := lar_func_@<<:catch_base>>(recover())
        if c != nil {
            e = c.lar_go_method_to_go_err()
        }
    }()
    this.writeable.lar_method_close()
    return
}

func lar_go_func_@<<io.Writeable_to_go_WriteCloser>>(writeable lar_intf_@<<Writeable>>) io.WriteCloser {
    p, ok := writeable.(lar_go_stru_@<<io.go_WriteCloser_to_Writeable>>)
    if ok {
        return p.w
    }
    return lar_go_stru_@<<io.Writeable_to_go_WriteCloser>>{
        writeable: writeable,
    }
}

type lar_go_stru_@<<io.go_WriteCloser_to_Writeable>> struct {
    w io.WriteCloser
}

func (this lar_go_stru_@<<io.go_WriteCloser_to_Writeable>>) lar_method_write(buf *lar_arr_uint8_1) {
    _, err := this.w.Write(buf.arr)
    lar_go_func_@<<throw_on_go_err>>(err)
}

func (this lar_go_stru_@<<io.go_WriteCloser_to_Writeable>>) lar_method_close() {
    err := this.w.Close()
    lar_go_func_@<<throw_on_go_err>>(err)
}

func lar_go_func_@<<io.go_WriteCloser_to_Writeable>>(w io.WriteCloser) lar_intf_@<<Writeable>> {
    p, ok := w.(lar_go_stru_@<<io.Writeable_to_go_WriteCloser>>)
    if ok {
        return p.writeable
    }
    return lar_go_stru_@<<io.go_WriteCloser_to_Writeable>>{
        w: w,
    }
}
