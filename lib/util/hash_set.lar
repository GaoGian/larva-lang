import reflect;

public class HashSet<E>
{
    public HashSet(Iter<E> data_iter)
    {
        this.hm = new HashMap<E, bool>(nil);
        if (data_iter != nil)
        {
            this.update(data_iter);
        }
    }

    public void update(Iter<E> data_iter)
    {
        for (; !data_iter.after_end(); data_iter.inc())
        {
            this.add(data_iter.get());
        }
    }

    public String repr()
    {
        var sl = new String[this.size() + 2];
        sl[0] = "<%s [".(reflect.type_name(this));
        long i = 1;
        for (var it = this.iter(); !it.after_end(); it.inc())
        {
            if (i == 1)
            {
                sl[i] = "%r".(it.get());
            }
            else
            {
                sl[i] = ", %r".(it.get());
            }
            ++ i;
        }
        sl[i] = "]>";
        ++ i;
        return "".join(sl[: i].iter());
    }

    public void add(E e)
    {
        this.hm.set(e, true);
    }

    public HashSetIter<E> iter()
    {
        return new HashSetIter<E>(this.hm.iter());
    }

    HashMap<E, bool> hm usemethod(size);
}

public class HashSetIter<E>
{
    HashSetIter(HashMapIter<E, bool> it)
    {
        this.hm_it = it;
    }

    public E get()
    {
        return this.hm_it.key();
    }

    HashMapIter<E, bool> hm_it usemethod(before_begin, after_end, inc, dec);
}
