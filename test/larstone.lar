import sys, time;

class Record
{
    var PtrComp, Discr, EnumComp, IntComp, StringComp;

    func __init()
    {
        Discr, EnumComp, IntComp = 0, 0, 0;
    }

    func assign(other)
    {
        PtrComp = other.PtrComp;
        Discr = other.Discr;
        EnumComp = other.EnumComp;
        IntComp = other.IntComp;
        StringComp = other.StringComp;
    }
}

var loops = 50000000,

    Ident1 = 1,
    Ident2 = 2,
    Ident3 = 3,
    Ident4 = 4,
    Ident5 = 5,

    IntGlob = 0,
    BoolGlob = false,
    Char1Glob = 0,
    Char2Glob = 0,
    Array1Glob = [0] * 51,
    Array2Glob = [[0] * 51 for (var i : range(51))],

    PtrGlb = nil,
    PtrGlbNext = nil;

func Func3(EnumParIn)
{
    var EnumLoc = EnumParIn;
    return EnumLoc == Ident3;
}

func Func2(StrParI1, StrParI2)
{
    var IntLoc = 1,
        CharLoc = 0;
    while (IntLoc <= 1)
    {
        if (Func1(StrParI1.ord_at(IntLoc), StrParI2.ord_at(IntLoc + 1)) == Ident1)
        {
            CharLoc = 65;
            IntLoc += 1;
        }
    }
    if (CharLoc >= 87 && CharLoc <= 90)
    {
        IntLoc = 7;
    }
    if (CharLoc == 88)
    {
        return true;
    }
    else
    {
        if (StrParI1 > StrParI2)
        {
            IntLoc += 7;
            return true;
        }
        else
        {
            return false;
        }
    }
}

func Func1(CharPar1, CharPar2)
{
    var CharLoc1 = CharPar1,
        CharLoc2 = CharLoc1;
    return CharLoc2 != CharPar2 ? Ident1 : Ident2;
}

func Proc8(Array1Par, Array2Par, IntParI1, IntParI2)
{
    var IntLoc = IntParI1 + 5;
    Array1Par[IntLoc] = IntParI2;
    Array1Par[IntLoc + 1] = Array1Par[IntLoc];
    Array1Par[IntLoc + 30] = IntLoc;
    for (var IntIndex : range(IntLoc, IntLoc + 2))
    {
        Array2Par[IntLoc][IntIndex] = IntLoc;
    }
    Array2Par[IntLoc][IntLoc - 1] = Array2Par[IntLoc][IntLoc - 1] + 1;
    Array2Par[IntLoc + 20][IntLoc] = Array1Par[IntLoc];
    IntGlob = 5;
}

func Proc7(IntParI1, IntParI2)
{
    var IntLoc = IntParI1 + 2,
        IntParOut = IntParI2 + IntLoc;
    return IntParOut;
}

func Proc6(EnumParIn)
{
    var EnumParOut = EnumParIn;
    if (!Func3(EnumParIn))
    {
        EnumParOut = Ident4;
    }
    if (!(EnumParIn == Ident1))
    {
        EnumParOut = Ident1;
    }
    else if (EnumParIn == Ident2)
    {
        if (IntGlob > 100)
        {
            EnumParOut = Ident1;
        }
        else
        {
            EnumParOut = Ident4;
        }
    }
    else if (EnumParIn == Ident3)
    {
        EnumParOut = Ident2;
    }
    else if (EnumParIn == Ident4)
    {
    }
    else if (EnumParIn == Ident5)
    {
        EnumParOut = Ident3;
    }
    return EnumParOut;
}

func Proc5()
{
    Char1Glob = 65;
    BoolGlob = false;
}

func Proc4()
{
    var BoolLoc = Char1Glob == 65;
    BoolLoc = BoolLoc || BoolGlob;
    Char2Glob = 66;
}

func Proc3(PtrParOut)
{
    if (PtrGlb != nil)
    {
        PtrParOut = PtrGlb.PtrComp;
    }
    else
    {
        IntGlob = 100;
    }
    PtrGlb.IntComp = Proc7(10, IntGlob);
    return PtrParOut;
}

func Proc2(IntParIO)
{
    var IntLoc = IntParIO + 10,
        EnumLoc = 0;
    while (true)
    {
        if (Char1Glob == 65)
        {
            IntLoc -= 1;
            IntParIO = IntLoc - IntGlob;
            EnumLoc = Ident1;
        }
        if (EnumLoc == Ident1)
        {
            break;
        }
    }
    return IntParIO;
}

func Proc1(PtrParIn)
{
    var NextRecord = PtrParIn.PtrComp;
    NextRecord.assign(PtrGlb);
    PtrParIn.IntComp = 5;
    NextRecord.IntComp = PtrParIn.IntComp;
    NextRecord.PtrComp = PtrParIn.PtrComp;
    NextRecord.PtrComp = Proc3(NextRecord.PtrComp);
    if (NextRecord.Discr == Ident1)
    {
        NextRecord.IntComp = 6;
        NextRecord.EnumComp = Proc6(PtrParIn.EnumComp);
        NextRecord.PtrComp = PtrGlb.PtrComp;
        NextRecord.IntComp = Proc7(NextRecord.IntComp, 10);
    }
    else
    {
        PtrParIn.assign(NextRecord);
    }
    return PtrParIn;
}

func Proc0()
{
    PtrGlbNext = Record();
    PtrGlb = Record();
    PtrGlb.PtrComp = PtrGlbNext;
    PtrGlb.Discr = Ident1;
    PtrGlb.EnumComp = Ident3;
    PtrGlb.IntComp = 40;
    PtrGlb.StringComp = "DHRYSTONE PROGRAM, SOME STRING";
    var String1Loc = "DHRYSTONE PROGRAM, 1'ST STRING";
    Array2Glob[8][7] = 10;

    for (var i : range(loops))
    {
        Proc5();
        Proc4();
        var IntLoc1 = 2,
            IntLoc2 = 3,
            String2Loc = "DHRYSTONE PROGRAM, 2'ND STRING",
            EnumLoc = Ident2;
        BoolGlob = !Func2(String1Loc, String2Loc);
        var IntLoc3 = 0;
        while (IntLoc1 < IntLoc2)
        {
            IntLoc3 = 5 * IntLoc1 - IntLoc2;
            IntLoc3 = Proc7(IntLoc1, IntLoc2);
            IntLoc1 += 1;
        }
        Proc8(Array1Glob, Array2Glob, IntLoc1, IntLoc3);
        PtrGlb = Proc1(PtrGlb);
        for (var CharIndex : range(65, Char2Glob + 1))
        {
            if (EnumLoc == Func1(CharIndex, 67))
            {
                EnumLoc = Proc6(Ident1);
            }
        }
        IntLoc3 = IntLoc2 * IntLoc1;
        IntLoc2 = IntLoc3 / IntLoc1;
        IntLoc2 = 7 * (IntLoc3 - IntLoc2) - IntLoc1;
        IntLoc1 = Proc2(IntLoc1);
    }
}

func main(argv)
{
    if (argv.len() > 1)
    {
        loops = argv[1].to_int();
    }
    var ts = time.time();
    Proc0();
    var tm = time.time() - ts;
    sys.stdout.writeln("Time used: %s sec" % tm);
    sys.stdout.writeln("This machine benchmarks at %s LarStones/second" % (loops / tm));
}
