import time, net, random;

void log(String msg)
{
    println("[%s] %s".(time.format_time("2006-01-02 15:04:05", time.time()), msg));
}

class Client
{
    net.TcpConn m_sock;
    char[] m_result;

    Client(net.TcpConn sock)
    {
        m_sock = sock;
        m_result = new char[4];
        bool[] selected = new bool[10];
        for (int i = 0; i < 4; )
        {
            char c = (char)(random.random() * 10.0);
            if (selected[c])
            {
                continue;
            }
            selected[c] = true;
            m_result[i] = '0' + c;
            ++ i;
        }
        client_log("start with result [%s]".(new String(m_result)));
    }

    void client_log(String s)
    {
        log("client [%s]: %s".(m_sock.remote_addr(), s));
    }

    bool is_valid_input(char[] s, long sz)
    {
        if (sz != 6)
        {
            return false;
        }
        bool[] selected = new bool[10];
        for (uint i = 0; i < 4; ++ i)
        {
            char c = s[i];
            if (c < '0' || c > '9' || selected[c - '0'])
            {
                return false;
            }
            selected[c - '0'] = true;
        }
        return true;
    }

    void send_str(String s)
    {
        m_sock.write(s.to_char_array());
    }
    void send_line(String s)
    {
        send_str(s.concat("\r\n"));
    }

    void _run()
    {
        char[] recv_buf = new char[1000];
        int[] rsp = new int[2];
        while (true)
        {
            send_str("Guess a number, 4 different digits:");

            long recved_size = m_sock.read(recv_buf);
            if (recved_size == 0)
            {
                client_log("client over");
                return;
            }

            if (recved_size < 2 || recv_buf[recved_size - 1] != '\n' || recv_buf[recved_size - 2] != '\r')
            {
                throw("proto error");
            }
            if (recved_size == 2)
            {
                continue;
            }

            if (!is_valid_input(recv_buf, recved_size))
            {
                send_line("Invalid input");
                continue;
            }

            rsp[0] = 0;
            rsp[1] = 0;
            for (long i = 0; i < 4; ++ i)
            {
                for (long j = 0; j < 4; ++ j)
                {
                    if (m_result[i] == recv_buf[j])
                    {
                        if (i == j)
                        {
                            ++ rsp[0];
                        }
                        else
                        {
                            ++ rsp[1];
                        }
                    }
                }
            }
            if (rsp[0] == 4)
            {
                send_line("You got it");
                client_log("player win");
                return;
            }
            send_line("%dA%dB".(rsp[0], rsp[1]));
        }
    }

    public void run()
    {
        defer
        {
            var c = catch_base();
            if (c != nil)
            {
                client_log("client ends with exception [%s], traceback[%s]".(c.throwed().str(), c.traceback()));
            }
        }
        defer m_sock.close();

        _run();
    }
}

public int main(String[] args)
{
    net.TcpListener listener = new net.TcpListener(":9999");
    defer listener.close();

    log("game start!");
    while (true)
    {
        defer
        {
            var c = catch_base();
            if (c != nil)
            {
                log("accept new client failed [%s][%s]".(c.throwed().str(), c.traceback()));
            }
        }

        net.TcpConn new_client = listener.accept();
        log("accept success, new client [%s]".(new_client.remote_addr()));

        start_coroutine(new Client(new_client));
    }
    return 0;
}
